AWSTemplateFormatVersion: "2010-09-09"
Description: Infrastructure Code for the Web3 Authentication Service
Parameters:
  ServiceName:
    Type: String
    Description: The name of the service we are deploying
  DeveloperAccount:
    Type: String
    Description: The developer account
  DomainName:
    Type: String
    Description: The domain name of the service
  HostedZoneId:
    Type: String
    Description: The hosted zone id for route 53
  Memory:
    Type: String
    Description: Amount of memory to give the API tasks
  Cpu:
    Type: String
    Description: Amount of CPU to give the API tasks
  DockerImage:
    Type: String
    Description: Docker image the task should use
  PrivateSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Private subnets to run the task in
  PublicSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Public subnets to run the loadbalancer in
  VpcId:
    Type: String
    Description: The VPC we are running the service in
  ApiDomainName:
    Type: String
    Description: The actual domain name to put the API behind
  ApiHostedZoneId:
    Type: String
    Description: The hosted zone id for the API domain name
  AutoScalingCpuTargetValue:
    Type: String
    Description: The target CPU value to start auto scaling at
  MaxInstanceCount:
    Type: String
    Description: The max number of instances to run
  DesiredInstanceCount:
    Type: String
    Description: The desired 'default' state
  NotificationEmail:
    Type: String
    Description: The email address to send notifications to
Resources:
  KMS:
    Type: AWS::KMS::Key
    Properties:
      Description: adn-management-kms-service
      Enabled: true
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Id: !Sub ${ServiceName}-kms-policy
        Statement:
          - Sid: developer-access
            Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:user/${DeveloperAccount}"
            Action: "kms:*"
            Resource: "*"
          - Sid: Role Access
            Effect: Allow
            Principal:
              AWS: !GetAtt TaskRole.Arn
            Action:
              - kms:GenerateDataKey
              - kms:Decrypt
            Resource: "*"
  JwksSecretsManager:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: !Sub ${ServiceName} JWKS Secrets Manager
      KmsKeyId: !Ref KMS
      Name: !Sub ${ServiceName}-jwks-secrets-manager
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      Description: The role for the fargate task to assume
      RoleName: !Sub ${ServiceName}-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
              AWS:
                - !Sub arn:aws:iam::${AWS::AccountId}:user/${DeveloperAccount}
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
  TaskPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: !Sub "${ServiceName}-task-policy"
      Roles:
        - !Ref TaskRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "secretsmanager:GetRandomPassword"
              - "secretsmanager:GetResourcePolicy"
              - "secretsmanager:GetSecretValue"
              - "secretsmanager:DescribeSecret"
              - "secretsmanager:ListSecretVersionIds"
            Resource: !Ref JwksSecretsManager
          - Effect: "Allow"
            Action:
              - "logs:*"
            Resource: !GetAtt LogGroup.Arn
  ### JWKS Management ###
  JWKSBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub "${ServiceName}-bucket"
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
            AllowedOrigins:
              - "*"
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref JWKSBucket
      PolicyDocument:
        Statement:
          - Action:
              - "s3:GetObject"
            Effect: "Allow"
            Resource:
              - !Sub ${JWKSBucket.Arn}/*
              - !GetAtt JWKSBucket.Arn
            Principal:
              AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${OriginAccessId}"
          - Action: ["s3:*"]
            Effect: Allow
            Resource:
              - !GetAtt JWKSBucket.Arn
              - !Sub "${JWKSBucket.Arn}/*"
            Principal:
              AWS:
                - !Sub "arn:aws:iam::${AWS::AccountId}:user/${DeveloperAccount}"
  OriginAccessId:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: Only allow the CloudFront Distribution to serve content from the bucket
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref DomainName
        Enabled: true
        HttpVersion: http2
        Origins:
          - DomainName: !Ref ApiDomainName
            Id: "auth-api"
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: "https-only"
              OriginKeepaliveTimeout: 60
              OriginReadTimeout: 60
              OriginSSLProtocols:
                - "TLSv1.2"
          - DomainName: !GetAtt JWKSBucket.DomainName
            Id: !Ref JWKSBucket
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${OriginAccessId}
        DefaultCacheBehavior:
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # No caching
          OriginRequestPolicyId: 216adef6-5c7f-47e4-b989-5492eafa07d3 # Forward all headers
          ResponseHeadersPolicyId: 5cc3b908-e619-4b99-88e5-2cf7f45965bd # Allow CORS requests
          Compress: false
          CachedMethods:
            - GET
            - HEAD
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            - PUT
            - PATCH
            - POST
            - DELETE
          ViewerProtocolPolicy: https-only
          TargetOriginId: "auth-api"
        CacheBehaviors:
          - CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # Managed Caching Optimized
            OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # S3 Forward CORS headers
            TargetOriginId: !Ref JWKSBucket
            ViewerProtocolPolicy: https-only
            PathPattern: "/.well-known/jwks.json"
        ViewerCertificate:
          AcmCertificateArn: !Ref Certificate
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021
  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      CertificateTransparencyLoggingPreference: ENABLED
      DomainName: !Ref DomainName
      DomainValidationOptions:
        - DomainName: !Ref DomainName
          HostedZoneId: !Ref HostedZoneId
      ValidationMethod: DNS
  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name:  !Ref DomainName
      Type: A
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2 # The Hosted Zone ID of all cloudfront distributions
        DNSName: !GetAtt "CloudFrontDistribution.DomainName"

  ### API Setup ##
  DockerRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref ServiceName
      ImageTagMutability: MUTABLE
      LifecyclePolicy:
        LifecyclePolicyText: '{
          "rules": [
              {
                "rulePriority": 1,
                "description": "Lifecycle policy for cleaning up old docker image",
                "selection": {
                    "tagStatus": "any",
                    "countType": "imageCountMoreThan",
                    "countNumber": 2
                },
                "action": {
                    "type": "expire"
                }
              }
          ]
        }'
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref ServiceName
      RetentionInDays: 30
  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ServiceName
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: !Ref Cpu
      Memory: !Ref Memory
      ExecutionRoleArn: !GetAtt TaskRole.Arn
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !GetAtt TaskRole.Arn
      ContainerDefinitions:
        - Essential: true
          Image: !Ref DockerImage
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref ServiceName
          Name: !Ref EcsCluster
          PortMappings:
            - ContainerPort: 8000
          StopTimeout: 120
          Environment:
            - Name: JWKS_SECRETS_MANAGER
              Value: !Ref JwksSecretsManager
  ECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - LoadBalancer
      - LoadBalancerListener
    Properties:
      Cluster: !Ref EcsCluster
      DesiredCount: 1
      LaunchType: FARGATE
      PropagateTags: TASK_DEFINITION
      LoadBalancers:
        - ContainerName: !Ref EcsCluster
          ContainerPort: 8000
          TargetGroupArn: !Ref TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets: !Ref PrivateSubnets
          SecurityGroups:
            - !Ref AppSg
      PropagateTags: TASK_DEFINITION
      DeploymentConfiguration:
        MinimumHealthyPercent: 100 # Keep previous version running while doing a deployment until the new tasks become healthy
        MaximumPercent: 200 # Never run more than double the desited count
      ServiceName: !Ref ServiceName
      TaskDefinition: !Ref TaskDefinition
  LoadBalancerSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub "${ServiceName} Security Group"
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
  AppSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows Fargate tasks to communicate with the load balancer on all ports
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          SourceSecurityGroupId: !Ref LoadBalancerSg
          FromPort: 1
          ToPort: 65000
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds # Wait 1 minute for a resoponse from the task before timing out
        Value: '60'
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerSg
      Subnets:
        !Ref PublicSubnets
      Type: application
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref ApiCertificate
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /health
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Port: 8000
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '30'
      TargetType: ip
      VpcId: !Ref VpcId
  ApiCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      CertificateTransparencyLoggingPreference: ENABLED
      DomainName: !Ref ApiDomainName
      DomainValidationOptions:
        - DomainName: !Ref ApiDomainName
          HostedZoneId: !Ref ApiHostedZoneId
      ValidationMethod: DNS
  ApiDnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref ApiHostedZoneId
      Name:  !Ref ApiDomainName
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
        DNSName: !GetAtt LoadBalancer.DNSName
  AlertTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - Endpoint: !Ref NotificationEmail
        Protocol: email
  AlertMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: '"ALERT:"'
      LogGroupName: !Ref LogGroup
      MetricTransformations:
        - MetricName: alerts
          MetricNamespace: !Ref ServiceName
          MetricValue: '1'
  AlertMetricAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
        AlarmName: !Sub "${ServiceName}-Alerts"
        AlarmDescription: "Send an email when an alert is logged"
        AlarmActions:
          - !Ref AlertTopic
        MetricName: alerts
        Namespace: !Ref ServiceName
        ComparisonOperator: "GreaterThanOrEqualToThreshold"
        EvaluationPeriods: 1
        Period: 300
        Statistic: "Sum"
        Threshold: 1
  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref DesiredInstanceCount
      MaxCapacity: !Ref MaxInstanceCount
      ResourceId: !Join ['/', [service, !Ref EcsCluster, !GetAtt ECSService.Name]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !GetAtt AutoScalingRole.Arn
  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ServiceName}-auto-scaling-role"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole
  AutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub "${ServiceName}-auto-scaling-policy"
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 300
        ScaleOutCooldown: 300
        TargetValue: !Ref AutoScalingCpuTargetValue