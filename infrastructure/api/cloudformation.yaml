AWSTemplateFormatVersion: "2010-09-09"
Description: Infrastructure Code for the Web3 Authentication Service
Parameters:
  ServiceName:
    Type: String
    Description: The name of the service we are deploying
  DeveloperAccount:
    Type: String
    Description: The developer account
  DomainName:
    Type: String
    Description: The domain name of the service
  HostedZoneId:
    Type: String
    Description: The hosted zone id for route 53
  Memory:
    Type: String
    Description: Amount of memory to give the API tasks
  Cpu:
    Type: String
    Description: Amount of CPU to give the API tasks
  DockerImage:
    Type: String
    Description: Docker image the task should use
Resources:
  KMS:
    Type: AWS::KMS::Key
    Properties:
      Description: adn-management-kms-service
      Enabled: true
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Id: !Sub ${ServiceName}-kms-policy
        Statement:
          - Sid: developer-access
            Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:user/${DeveloperAccount}"
            Action: "kms:*"
            Resource: "*"
          - Sid: Role Access
            Effect: Allow
            Principal:
              AWS: !GetAtt TaskRole.Arn
            Action:
              - kms:GenerateDataKey
              - kms:Decrypt
            Resource: "*"
  JwksSecretsManager:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: !Sub ${ServiceName} JWKS Secrets Manager
      KmsKeyId: !Ref KMS
      Name: !Sub ${ServiceName}-jwks-secrets-manager
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      Description: The role for the fargate task to assume
      RoleName: !Sub ${ServiceName}-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
              AWS:
                - !Sub arn:aws:iam::${AWS::AccountId}:user/${DeveloperAccount}
            Action:
              - 'sts:AssumeRole'
  TaskPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: !Sub "${ServiceName}-task-policy"
      Roles:
        - !Ref TaskRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "secretsmanager:GetRandomPassword"
              - "secretsmanager:GetResourcePolicy"
              - "secretsmanager:GetSecretValue"
              - "secretsmanager:DescribeSecret"
              - "secretsmanager:ListSecretVersionIds"
            Resource: !Ref JwksSecretsManager
  ### JWKS Management ###
  JWKSBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub "${ServiceName}-bucket"
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
            AllowedOrigins:
              - "*"
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref JWKSBucket
      PolicyDocument:
        Statement:
          - Action:
              - "s3:GetObject"
            Effect: "Allow"
            Resource:
              - !Sub ${JWKSBucket.Arn}/*
              - !GetAtt JWKSBucket.Arn
            Principal:
              AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${OriginAccessId}"
          - Action: ["s3:*"]
            Effect: Allow
            Resource:
              - !GetAtt JWKSBucket.Arn
              - !Sub "${JWKSBucket.Arn}/*"
            Principal:
              AWS:
                - !Sub "arn:aws:iam::${AWS::AccountId}:user/${DeveloperAccount}"
  OriginAccessId:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: Only allow the CloudFront Distribution to serve content from the bucket
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref DomainName
        Enabled: true
        HttpVersion: http2
        Origins:
          - DomainName: "run.mocky.io"
            Id: "mocky-testing"
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: "https-only"
              OriginKeepaliveTimeout: 60
              OriginReadTimeout: 60
              OriginSSLProtocols:
                - "TLSv1.2"
          - DomainName: !GetAtt JWKSBucket.DomainName
            Id: !Ref JWKSBucket
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${OriginAccessId}
        DefaultCacheBehavior:
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
          Compress: false
          CachedMethods:
            - GET
            - HEAD
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            - PUT
            - PATCH
            - POST
            - DELETE
          ViewerProtocolPolicy: https-only
          TargetOriginId: "mocky-testing"
        CacheBehaviors:
          - CachePolicyId: b2884449-e4de-46a7-ac36-70bc7f1ddd6d
            TargetOriginId: !Ref JWKSBucket
            ViewerProtocolPolicy: https-only
            PathPattern: "/.well-known/jwks.json"
        ViewerCertificate:
          AcmCertificateArn: !Ref Certificate
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021
  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      CertificateTransparencyLoggingPreference: ENABLED # Interesting article https://aws.amazon.com/blogs/security/how-to-get-ready-for-certificate-transparency/
      DomainName: !Ref DomainName
      DomainValidationOptions:
        - DomainName: !Ref DomainName
          HostedZoneId: !Ref HostedZoneId
      ValidationMethod: DNS
  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name:  !Ref DomainName
      Type: A
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2 # The Hosted Zone ID of all cloudfront distributions
        DNSName: !GetAtt "CloudFrontDistribution.DomainName"

  ### API Setup ##
  DockerRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref ServiceName
      ImageTagMutability: MUTABLE
      LifecyclePolicy:
        LifecyclePolicyText: '{
          "rules": [
              {
                "rulePriority": 1,
                "description": "Lifecycle policy for cleaning up old docker image",
                "selection": {
                    "tagStatus": "any",
                    "countType": "imageCountMoreThan",
                    "countNumber": 2
                },
                "action": {
                    "type": "expire"
                }
              }
          ]
        }'
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref ServiceName
      RetentionInDays: 30
  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ServiceName
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: !Ref Cpu
      Memory: !Ref Memory
      ExecutionRoleArn: !GetAtt TaskRole.Arn
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !GetAtt TaskRole.Arn
      ContainerDefinitions:
        - Essential: true
          Image: !Ref DockerImage
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref ServiceName
          Name: !Ref EcsCluster
          PortMappings:
            - ContainerPort: 8000
          StopTimeout: 120
          Environment:
            - Name: JWKS_SECRETS_MANAGER
              Value: !Ref JwksSecretsManager